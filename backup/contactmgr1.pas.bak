unit contactmgr1;

{$mode objfpc}{$H+}

interface

uses
  {$IFDEF WINDOWS}
     Win32Proc,
  {$ENDIF} Classes, SysUtils, Forms, Controls, Graphics, Dialogs, ExtCtrls, StdCtrls,
  ComCtrls, Buttons, contacts1, laz2_DOM , laz2_XMLRead, laz2_XMLWrite, Types, lazbbosversion,
  lazbbutils, impex1, lclintf, fphttpclient, strutils;

type
  TSaveMode = (None, State, All);
  { TFContactManager }

  TFContactManager = class(TForm)
    BtnDelete: TSpeedButton;
    BtnAbout: TSpeedButton;
    BtnEmailWk: TSpeedButton;
    BtnWeb: TSpeedButton;
    BtnPrefs: TSpeedButton;
    BtnQuit: TSpeedButton;
    BtnValid: TSpeedButton;
    BtnAdd: TSpeedButton;
    BtnLast: TSpeedButton;
    BtnLocate: TSpeedButton;
    BtnNext: TSpeedButton;
    BtnCoord: TSpeedButton;
    BtnPrev: TSpeedButton;
    BtnCancel: TSpeedButton;
    BtnWebWk: TSpeedButton;
    EAutre: TEdit;
    EAutreWk: TEdit;
    EBox: TEdit;
    EBoxWk: TEdit;
    ECountry: TEdit;
    ECountryWk: TEdit;
    EEmailWk: TEdit;
    ELatitudeWk: TEdit;
    ELieuditWk: TEdit;
    ELongitude: TEdit;
    ELongitudeWk: TEdit;
    EMobileWk: TEdit;
    EFonction: TEdit;
    EBpWk: TEdit;
    EPhoneWk: TEdit;
    EPostcodeWk: TEdit;
    EDatecreation: TEdit;
    ELatitude: TEdit;
    EDatemodif: TEdit;
    EStreetWk: TEdit;
    ECompany: TEdit;
    ETownWk: TEdit;
    EWeb: TEdit;
    ELieudit: TEdit;
    EMobile: TEdit;
    EName: TEdit;
    EEmail: TEdit;
    EBP: TEdit;
    EPhone: TEdit;
    EPostcode: TEdit;
    EStreet: TEdit;
    ESurname: TEdit;
    ETown: TEdit;
    EWebWk: TEdit;
    GBOrder: TGroupBox;
    ImgContact: TImage;
    LAutre: TLabel;
    LAutreWk: TLabel;
    LBContacts: TListBox;
    LBox: TLabel;
    LBoxWk: TLabel;
    LBP: TLabel;
    LBPWk: TLabel;
    LCountry: TLabel;
    LCountryWk: TLabel;
    LCP: TLabel;
    LCPWk: TLabel;
    LDateModif: TLabel;
    LEmailWk: TLabel;
    LLatitudeWk: TLabel;
    LLongitude: TLabel;
    LDateCre: TLabel;
    LLatitude: TLabel;
    LLongitudeWk: TLabel;
    LMobileWk: TLabel;
    LFonction: TLabel;
    LPhoneWk: TLabel;
    LStreetWk: TLabel;
    LCompany: TLabel;
    LWeb: TLabel;
    LMobile: TLabel;
    LName: TLabel;
    LEmail: TLabel;
    LPhone: TLabel;
    LStreet: TLabel;
    LSurname: TLabel;
    LWebWk: TLabel;
    PCtrl1: TPageControl;
    PnlImage: TPanel;
    PnlWork: TPanel;
    PnlPerso: TPanel;
    Panel3: TPanel;
    PPerso: TPanel;
    PWork: TPanel;
    PListBox: TPanel;
    PnlButtons: TPanel;
    PnlOrder: TPanel;
    RBLatit: TRadioButton;
    RBNameSurname: TRadioButton;
    RBPostcode: TRadioButton;
    RBSurnameName: TRadioButton;
    RBTown: TRadioButton;
    RBNone: TRadioButton;
    RBCountry: TRadioButton;
    RBlongit: TRadioButton;
    BtnImport: TSpeedButton;
    BtnFirst: TSpeedButton;
    BtnEmail: TSpeedButton;
    TSPerso: TTabSheet;
    TSWork: TTabSheet;
    procedure BtnAddClick(Sender: TObject);
    procedure BtnCancelClick(Sender: TObject);
    procedure BtnDeleteClick(Sender: TObject);
    procedure BtnImportClick(Sender: TObject);
    procedure BtnLocateClick(Sender: TObject);
    procedure BtnNavClick(Sender: TObject);
    procedure BtnQuitClick(Sender: TObject);
    procedure BtnValidClick(Sender: TObject);
    procedure EContactChange(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var CloseAction: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure LBContactsSelectionChange(Sender: TObject; User: boolean);
    procedure PPersoClick(Sender: TObject);
    procedure PWorkClick(Sender: TObject);
    procedure RBSortClick(Sender: TObject);
  private
    First: boolean;
    OS, OSTarget, CRLF : string;
    CompileDateTime: TDateTime;
    UserPath, UserAppsDataPath: string;
    ContactMgrAppsData: string;
    ProgName: string;
    ConfigFile: string;
    ListeContacts: TContactsList;
    SortType: TChampsCompare;
    CurIndex: integer;
    CurContChanged: boolean;
    ButtonStates: array [0..12] of Boolean;
    procedure LoadCfgFile(filename: string);
    procedure DisplayList;
    procedure DisplayContact;
    procedure SetContactChange(val: Boolean);
    procedure SaveButtonStates;
    procedure RestoreButtonStates;
    procedure DisableButtons;
    function SaveConfig(Typ: TSaveMode): boolean;
  public

  end;

var
  FContactManager: TFContactManager;

implementation

{$R *.lfm}

{ TFContactManager }


procedure TFContactManager.FormCreate(Sender: TObject);
var
  s: string;
begin
  First:= true;
  // Compilation date/time
  try
    CompileDateTime:= Str2Date({$I %DATE%}, 'YYYY/MM/DD')+StrToTime({$I %TIME%});
  except
    CompileDateTime:=  now();
  end;
  OS:= 'Unk';
  UserPath:= GetUserDir;
  UserAppsDataPath:= UserPath;
  {$IFDEF Linux}
     OS:= 'Linux';
     CRLF:= #10;
     LangStr:=GetEnvironmentVariable('LANG');
     x:= pos('.', LangStr);
     LangStr:= Copy(LangStr,0, 2);
     wxbitsrun:= 0;
     GetSysInfo(OsInfo);
  {$ENDIF}
  {$IFDEF WINDOWS}
     OS:= 'Windows ';
     CRLF:= #13#10;
     // get user data folder
     s:= ExtractFilePath(ExcludeTrailingPathDelimiter(GetAppConfigDir(False)));
     if  Ord(WindowsVersion) < 7 then UserAppsDataPath:= s                     // NT to XP
     else UserAppsDataPath:= ExtractFilePath(ExcludeTrailingPathDelimiter(s))+'Roaming\';  // Vista to W10
     //LazGetShortLanguageID(LangStr);
  {$ENDIF}
  ProgName:= 'ContactMgr';
  ContactMgrAppsData:= UserAppsDataPath+'\'+ProgName+'\';
    if not DirectoryExists (ContactMgrAppsData) then
  begin
    CreateDir(ContactMgrAppsData);
  end;
end;

procedure TFContactManager.FormDestroy(Sender: TObject);
begin
  FreeAndNil(ListeContacts);
end;

procedure TFContactManager.FormActivate(Sender: TObject);
var
  xmlContacts: TXMLDocument;
  i: integer;
begin
  inherited;
  if not first then exit;
  {$IFDEF WIN32}
      OSTarget:= '32 bits';
  {$ENDIF}
  {$IFDEF WIN64}
      OSTarget:= '64 bits';
  {$ENDIF}
  ListeContacts:= TContactsList.Create;
  ReadXMLFile(xmlContacts, 'Contacts.xml');
  ConfigFile:= ContactMgrAppsData+ProgName+'.xml';
  If not FileExists(ConfigFile) then
  begin
    If FileExists (ContactMgrAppsData+ProgName+'.bk0') then
    begin
      RenameFile(ContactMgrAppsData+ProgName+'.bk0', ConfigFile);
      For i:= 1 to 5
      do if FileExists (ContactMgrAppsData+ProgName+'.bk'+IntToStr(i))     // Renomme les précédentes si elles existent
       then  RenameFile(ContactMgrAppsData+ProgName+'.bk'+IntToStr(i), ContactMgrAppsData+ProgName+'.bk'+IntToStr(i-1));
    end else
    begin
      SaveConfig(All)
    end;
  end;
  LoadCfgFile(ConfigFile);
  CurIndex:= 0;
  DisplayList;
   Case ListeContacts.SortType of
    cdcName : RBNameSurname.Checked:= True;
    cdcSurname : RBSurnameName.Checked:= True;
    cdcPostcode : RBPostCode.Checked:= True;
    cdcTown : RBTown.Checked:= True;
    cdcCountry : RBCountry.Checked:= True;
    cdcLongit : RBLongit.Checked:= True;
    cdcLatit : RBLatit.Checked:= True;
  end;
  // Positionne les faux onglets et positionne sur l'onglet personnel
  PPerso.Left:= 2;
  PWork.left:= PPerso.Width+PPerso.Left;
  PPersoClick(Sender);
end;

procedure TFContactManager.FormClose(Sender: TObject;
  var CloseAction: TCloseAction);
begin
    //if not ReallyCanClose then
    //CloseAction := caNone else
    //begin
    //  LogSession.Add(DateTimeToStr(now)+' - '+logclosefbb);
    //  LogSession.Add(' ');
    //  LogSession.SaveToFile(AppdataPath+'log.txt');
   SaveConfig(All);
    //end;

end;


procedure TFContactManager.LoadCfgFile(filename: string);
var
  CfgXML: TXMLDocument;
  RootNode, SettingsNode, ContactsNode : TDOMNode;
begin
  ReadXMLFile(CfgXml, ConfigFile);
  RootNode := CfgXML.DocumentElement;
  ContactsNode:= RootNode.FindNode('contacts');
  ListeContacts.ReadXMLNode(ContactsNode);
end;


function TFContactManager.SaveConfig(typ: TSaveMode): boolean;
var
  CfgXML: TXMLDocument;
  RootNode, SettingsNode, ContactsNode :TDOMNode;
begin
  if FileExists(ConfigFile)then
  begin
    ReadXMLFile(CfgXml, ConfigFile);
    RootNode := CfgXML.DocumentElement;
  end else
  begin
    CfgXML := TXMLDocument.Create;
    RootNode := CfgXML.CreateElement('config');
    CfgXML.Appendchild(RootNode);
  end;
  if (Typ= State) or (Typ = All) then
  begin
    SettingsNode:= RootNode.FindNode('settings');
    if SettingsNode <> nil then RootNode.RemoveChild(SettingsNode);
    SettingsNode:= CfgXML.CreateElement('settings');
    //Settings.SaveXMLnode(SettingsNode);
    RootNode.Appendchild(SettingsNode);
  end;
  if (Typ = All) then
  begin
    ContactsNode:= RootNode.FindNode('contacts');
    if ContactsNode <> nil then RootNode.RemoveChild(ContactsNode);
    ContactsNode:= CfgXML.CreateElement('contacts');
    if ListeContacts.Count > 0 then ListeContacts.SaveToXMLnode(ContactsNode);
    RootNode.Appendchild(ContactsNode);
  end;
  writeXMLFile(CfgXML, ConfigFile);
end;



procedure TFContactManager.LBContactsSelectionChange(Sender: TObject;
  User: boolean);
begin
  CurIndex:= ListeContacts.GetItem(LBContacts.ItemIndex).Index1 ;
  BtnFirst.enabled:= boolean(LBContacts.ItemIndex);
  BtnPrev.enabled:= BtnFirst.enabled;
  BtnLast.Enabled:= boolean(LBContacts.Count-1-LBContacts.ItemIndex);
  BtnNext.Enabled:= BtnLast.Enabled;
  DisplayContact;
end;




procedure TFContactManager.DisplayList;
var
  i: integer;
  MyContact: TContact;
  s: string;
  ndx: integer;
begin
  ndx:= 0;
  if ListeContacts.Count > 0 then
  begin
    LBContacts.Clear;
    For i:= 0 to ListeContacts.Count-1 do
    begin
      MyContact:= ListeContacts.GetItem(i) ;
      With MyContact do
      begin
        if length(surname) > 0 then
        begin
          if length (name) > 0 then s:= surname+' '+name else s:= surname;
        end else s:= name;
        if index1 = curindex then ndx:= i;        // Repositionner après tri
      end;
      LBContacts.Items.Add(s);
    end;
    LBContacts.ItemIndex:= ndx;
    curindex:= ListeContacts.GetItem(ndx).Index1 ;
    DisplayContact;

  end;
end;

procedure TFContactManager.DisplayContact;
var
  n: integer;
  DecSep: Char;
begin
  SetContactChange(false);
  n:= LBContacts.ItemIndex;
  if (n < 0) and (n > LBContacts.count-1)  then exit;
  DecSep:= DefaultFormatSettings.DecimalSeparator;
  DefaultFormatSettings.DecimalSeparator:= '.';
  EName.text:= ListeContacts.GetItem(n).Name ;
  ESurname.text:= ListeContacts.GetItem(n).Surname;
  EStreet.text:= ListeContacts.GetItem(n).Street;
  EBP.text:= ListeContacts.GetItem(n).BP;
  ELieudit.text:= ListeContacts.GetItem(n).Lieudit;
  EPostcode.text:= ListeContacts.GetItem(n).Postcode ;
  ETown.text:= ListeContacts.GetItem(n).Town;
  ECountry.text:= ListeContacts.GetItem(n).Country;
  EPhone.text:= ListeContacts.GetItem(n).Phone;
  EBox.text:= ListeContacts.GetItem(n).Box;
  EMobile.text:= ListeContacts.GetItem(n).Mobile;
  EAutre.text:= ListeContacts.GetItem(n).Autre;
  EEmail.text:= ListeContacts.GetItem(n).Email;
  BtnEmail.enabled:= Boolean(length(EEMail.text));    // pas de bouton Email si pas d'email !
  EWeb.text:= ListeContacts.GetItem(n).Web;
  BtnWeb.Enabled:=  Boolean(length(EWeb.text));
  ELongitude.text:= FloatToStr(ListeContacts.GetItem(n).Longitude);
  ELatitude.text:= FloatToStr(ListeContacts.GetItem(n).Latitude);
  EDatecreation.text:= DateTimeToStr(ListeContacts.GetItem(n).Date);
  EDatemodif.text:= DateTimeToStr(ListeContacts.GetItem(n).DateModif);
  try
    ImgContact.Picture.LoadFromFile(ContactMgrAppsData+'images\'+ListeContacts.GetItem(n).Imagepath);
  except
    ImgContact.Picture:= nil;
  end;
  EFonction.text:= ListeContacts.GetItem(n).fonction ;
  ECompany.text:= ListeContacts.GetItem(n).Company;
  EStreetWk.text:= ListeContacts.GetItem(n).StreetWk;
  EBPWk.text:= ListeContacts.GetItem(n).BPWk;
  ELieuditWk.text:= ListeContacts.GetItem(n).LieuditWk;
  EPostcodeWk.text:= ListeContacts.GetItem(n).PostcodeWk ;
  ETownWk.text:= ListeContacts.GetItem(n).TownWk;
  ECountryWk.text:= ListeContacts.GetItem(n).CountryWk;
  EPhoneWk.text:= ListeContacts.GetItem(n).PhoneWk;
  EBoxWK.text:= ListeContacts.GetItem(n).BoxWk;
  EMobileWk.text:= ListeContacts.GetItem(n).MobileWk;
  EAutreWk.text:= ListeContacts.GetItem(n).AutreWk;
  EEmailWk.text:= ListeContacts.GetItem(n).EmailWk;
  BtnEmailWk.enabled:= Boolean(length(EEmailWk.text));
  EWebWK.text:= ListeContacts.GetItem(n).WebWk;
  BtnWebWk.Enabled:=  Boolean(length(EWebWk.text));
  ELongitudeWk.text:= FloatToStr(ListeContacts.GetItem(n).LongitudeWk);
  ELatitudeWk.text:= FloatToStr(ListeContacts.GetItem(n).LatitudeWk);

  DefaultFormatSettings.DecimalSeparator:= decSep;
  SetContactChange(true);
end;

procedure TFContactManager.BtnQuitClick(Sender: TObject);
begin

  Close;
end ;

procedure TFContactManager.BtnValidClick(Sender: TObject);
var
  tmpContact: TContact;

begin
  with tmpContact do
  begin
    Name:= EName.text;
    Surname:= ESurname.text;
    Street:= EStreet.text;
    BP:= EBP.text;
    Lieudit:= ELieudit.text;
    Postcode:= EPostcode.text;
    Town:= ETown.text;
    Country:= ECountry.text;
    Phone:= EPhone.text;
    Box:= EBox.text;
    Mobile:= EMobile.text;
    Autre:= EAutre.text;
    Email:= EEmail.text;
    Web:= EWeb.text;
    Longitude:= ListeContacts.GetFloat(ELongitude.text);
    Latitude:= ListeContacts.GetFloat(ELatitude.text);
    Date:=  ListeContacts.GetDate(EDatecreation.text);
    DateModif:= now();
    // image
    fonction:= EFonction.text;
    Company:= ECompany.text;
    StreetWk:= EStreetWk.text;
    BPWk:= EBPWk.text;
    LieuditWk:= ELieuditWk.text;
    PostcodeWk:= EPostcodeWk.text;
    TownWk:= ETownWk.text;
    CountryWk:= ECountryWk.text;
    PhoneWk:= EPhoneWk.text;
    BoxWk:= EBoxWK.text;
    MobileWk:= EMobileWk.text;
    AutreWk:= EAutreWk.text;
    EmailWk:= EEmailWk.text;
    WebWk:= EWebWK.text;
    LongitudeWk:=  ListeContacts.GetFloat(ELongitudeWk.text);
    LatitudeWk:=  ListeContacts.GetFloat(ELatitudeWk.text);
    Index1:= ListeContacts.GetItem(LBContacts.ItemIndex).Index1;
    Comment:= ListeContacts.GetItem(LBContacts.ItemIndex).Comment;
  end;
  ListeContacts.ModifyContact(LBContacts.ItemIndex, tmpContact);
  DisplayList;
  BtnCancelClick(Sender);
end;

procedure TFContactManager.SetContactChange(val: Boolean);
var
  i: integer;
begin
  for i:= 0 to PnlPerso.ControlCount- 1 do
    if (PnlPerso.Controls[i] is TEdit) then
      if val then
      begin
        TEdit(PnlPerso.Controls[i]).OnChange:= @EContactChange;
      end else
      begin
        TEdit(PnlPerso.Controls[i]).OnChange:= nil;
        TEdit(PnlPerso.Controls[i]).Color:= clDefault;
      end;
  for i:= 0 to PnlWork.ControlCount- 1 do
    if (PnlWork.Controls[i] is TEdit) then
      if val then
      begin
        TEdit(PnlWork.Controls[i]).OnChange:= @EContactChange;
      end else
      begin
        TEdit(PnlWork.Controls[i]).OnChange:= nil;
        TEdit(PnlWork.Controls[i]).Color:= clDefault;
      end;
end;

procedure TFContactManager.SaveButtonStates;
var
  i: integer;
  j: integer;
begin
  if CurContChanged then exit;
  j:= 0;
  for i:= 0 to PnlButtons.ControlCount- 1 do
    if (PnlButtons.Controls[i] is TSpeedButton) then
    begin
      ButtonStates[j]:= PnlButtons.Controls[i].Enabled;
      inc (j);
    end;
  CurContChanged:= true;
end;

procedure TFContactManager.RestoreButtonStates;
var
  i: integer;
  j: integer;
begin
  j:= 0;
  for i:= 0 to PnlButtons.ControlCount- 1 do
    if (PnlButtons.Controls[i] is TSpeedButton) then
    begin
      PnlButtons.Controls[i].Enabled:= ButtonStates[j];
      inc (j);
    end;
  CurContChanged:= False;
end;

procedure TFContactManager.DisableButtons;
var
  i: integer;
begin
   for i:= 0 to PnlButtons.ControlCount- 1 do
     if (PnlButtons.Controls[i] is TSpeedButton) then
     begin
       PnlButtons.Controls[i].Enabled:= false;
     end;
end;

procedure TFContactManager.EContactChange(Sender: TObject);
begin
  SaveButtonStates;
  DisableButtons;
  BtnValid.enabled:= true;
  BtnCancel.Enabled:= true;
  LBContacts.Enabled:= false;
  GBOrder.Enabled:= False;
  TEdit(Sender).Color:= clGradientActiveCaption;
end;

procedure TFContactManager.BtnImportClick(Sender: TObject);
var
  i: integer;
begin
  FImpex.ImpexContacts:= TContactsList.create;
  if FImpex.ShowModal = mrOK then
  begin
    for i:= 0 to Fimpex.LBImpex.Items.Count-1 do
    begin
      if Fimpex.LBImpex.Selected[i] then ListeContacts.AddContact(Fimpex.ImpexContacts.GetItem(i));
    end;
    ListeContacts.SortType:= SortType;
    DisplayList;
  end;
  FImpex.ImpexContacts.free;
end;




procedure TFContactManager.BtnLocateClick(Sender: TObject);
var
  smap, stmp: string;
  HTTPCli1: TFPHTTPClient;
  p: integer;
  sstreet, slieu, spost, stown, scountry: string;
begin
  smap:= 'https://www.google.fr/maps/search/';
  // check if perso or work
  if PCtrl1.ActivePage= TSPerso then
  begin
    sstreet:= EStreet.Text;
    slieu:= ELieudit.Text;
    spost:= EPostcode.Text;
    stown:= ETown.Text;
    scountry:= ECountry.Text;
  end else
  begin
    sstreet:= EStreetWk.text;
    slieu:= ELieuditWk.Text;
    spost:= EPostcodeWK.Text;
    stown:= ETownWk.Text;
    scountry:= ECountryWk.Text;
  end;
  if length(sstreet)>0 then smap:= smap+sstreet+'+' else
  begin
    if length(slieu)>0 then smap:= smap+slieu+'+';
  end;
  smap:= smap+',';
  if length(spost)>0 then smap:= smap+spost+'+';
  if length(stown)>0 then smap:= smap+stown;
  if length(scountry)>0 then smap:= smap+','+scountry;
  smap:= StringReplace(smap, ' ','+', [rfReplaceAll] );
  if TSpeedButton(Sender)= BtnLocate then OpenURL(smap);
  if TSpeedButton(Sender)= BtnCoord then
  begin
    HTTPCli1:= TFPHTTPClient.Create(nil);
    stmp:=HTTPCli1.get(smap);
    HTTPCli1.free;
    // p:= pos('https://www.google.fr/maps/preview/place', stmp);
    // Based on google analysed answer page; no warranty !
    p:= pos('/@', stmp);
    stmp:= copy(stmp, p+2, 30);
    if PCtrl1.ActivePage= TSPerso then
    begin
      ELatitude.Text:= ExtractDelimited(1, stmp, [',']);
      ELongitude.Text:= ExtractDelimited(2, stmp, [',']);
    end else
    begin
      ELatitudeWk.Text:= ExtractDelimited(1, stmp, [',']);
      ELongitudeWk.Text:= ExtractDelimited(2, stmp, [',']);
    end;
  end;
end;

procedure TFContactManager.BtnDeleteClick(Sender: TObject);


begin
  // todo insert alert box
  //AlertBox.ShowModal;
  //if (LBContacts.ItemIndex >= 0) and (LBContacts.ItemIndex < LBContacts.Count) then ListeContacts.Delete(LBContacts.ItemIndex);
  //DisplayList;
end;

procedure TFContactManager.BtnCancelClick(Sender: TObject);
begin
  SetContactChange(False);
  DisplayContact;
  SetContactChange(True);
  RestoreButtonStates;
  LBContacts.Enabled:= True;
  GBOrder.Enabled:= True;
end;



procedure TFContactManager.BtnAddClick(Sender: TObject);
begin

end;

procedure TFContactManager.BtnNavClick(Sender: TObject);
begin
  if (TSpeedButton(sender) = BtnNext) and (LBContacts.ItemIndex < LBContacts.Count-1)
  then LBContacts.ItemIndex:= LBContacts.ItemIndex+1;
  if (TSpeedButton(sender) = BtnPrev) and (LBContacts.ItemIndex > 0)
  then LBContacts.ItemIndex:= LBContacts.ItemIndex-1;
  if (TSpeedButton(sender) = BtnFirst) and (LBContacts.ItemIndex > 0)
  then LBContacts.ItemIndex:= 0;
  if (TSpeedButton(sender) = BtnLast) and (LBContacts.ItemIndex  < LBContacts.Count-1)
  then LBContacts.ItemIndex:= LBContacts.Count-1;
end;








// Remplace les onglets par des panels colorés
procedure TFContactManager.PPersoClick(Sender: TObject);
begin
  PCtrl1.ActivePage:= TSPerso;
  PWork.Color:= clDefault;
  PPerso.color:=  clGradientActiveCaption;
end;

procedure TFContactManager.PWorkClick(Sender: TObject);
begin
  PCtrl1.ActivePage:= TSWork;
  PPerso.color:= clDefault;
  PWork.color:= clGradientActiveCaption;

end;

procedure TFContactManager.RBSortClick(Sender: TObject);
begin
  if TRadioButton(Sender) = RBNameSurname then ListeContacts.SortType:= cdcName;
  if TRadioButton(Sender) = RBSurnameName then ListeContacts.SortType:= cdcSurname;
  if TRadioButton(Sender) = RBPostcode then ListeContacts.SortType:= cdcPostcode;
  if TRadioButton(Sender) = RBTown then ListeContacts.SortType:= cdcTown;
  if TRadioButton(Sender) = RBCountry then ListeContacts.SortType:= cdcCountry;
  if TRadioButton(Sender) = RBlongit then ListeContacts.SortType:= cdcLongit;
  if TRadioButton(Sender) = RBlatit then ListeContacts.SortType:= cdcLatit;
  DisplayList;
  //end;



end;





end.

